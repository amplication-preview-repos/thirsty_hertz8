/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { MaintenanceRecord } from "./MaintenanceRecord";
import { MaintenanceRecordCountArgs } from "./MaintenanceRecordCountArgs";
import { MaintenanceRecordFindManyArgs } from "./MaintenanceRecordFindManyArgs";
import { MaintenanceRecordFindUniqueArgs } from "./MaintenanceRecordFindUniqueArgs";
import { CreateMaintenanceRecordArgs } from "./CreateMaintenanceRecordArgs";
import { UpdateMaintenanceRecordArgs } from "./UpdateMaintenanceRecordArgs";
import { DeleteMaintenanceRecordArgs } from "./DeleteMaintenanceRecordArgs";
import { ServiceCenter } from "../../serviceCenter/base/ServiceCenter";
import { Vehicle } from "../../vehicle/base/Vehicle";
import { MaintenanceRecordService } from "../maintenanceRecord.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => MaintenanceRecord)
export class MaintenanceRecordResolverBase {
  constructor(
    protected readonly service: MaintenanceRecordService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "MaintenanceRecord",
    action: "read",
    possession: "any",
  })
  async _maintenanceRecordsMeta(
    @graphql.Args() args: MaintenanceRecordCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [MaintenanceRecord])
  @nestAccessControl.UseRoles({
    resource: "MaintenanceRecord",
    action: "read",
    possession: "any",
  })
  async maintenanceRecords(
    @graphql.Args() args: MaintenanceRecordFindManyArgs
  ): Promise<MaintenanceRecord[]> {
    return this.service.maintenanceRecords(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => MaintenanceRecord, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "MaintenanceRecord",
    action: "read",
    possession: "own",
  })
  async maintenanceRecord(
    @graphql.Args() args: MaintenanceRecordFindUniqueArgs
  ): Promise<MaintenanceRecord | null> {
    const result = await this.service.maintenanceRecord(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MaintenanceRecord)
  @nestAccessControl.UseRoles({
    resource: "MaintenanceRecord",
    action: "create",
    possession: "any",
  })
  async createMaintenanceRecord(
    @graphql.Args() args: CreateMaintenanceRecordArgs
  ): Promise<MaintenanceRecord> {
    return await this.service.createMaintenanceRecord({
      ...args,
      data: {
        ...args.data,

        serviceCenter: args.data.serviceCenter
          ? {
              connect: args.data.serviceCenter,
            }
          : undefined,

        vehicle: args.data.vehicle
          ? {
              connect: args.data.vehicle,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MaintenanceRecord)
  @nestAccessControl.UseRoles({
    resource: "MaintenanceRecord",
    action: "update",
    possession: "any",
  })
  async updateMaintenanceRecord(
    @graphql.Args() args: UpdateMaintenanceRecordArgs
  ): Promise<MaintenanceRecord | null> {
    try {
      return await this.service.updateMaintenanceRecord({
        ...args,
        data: {
          ...args.data,

          serviceCenter: args.data.serviceCenter
            ? {
                connect: args.data.serviceCenter,
              }
            : undefined,

          vehicle: args.data.vehicle
            ? {
                connect: args.data.vehicle,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MaintenanceRecord)
  @nestAccessControl.UseRoles({
    resource: "MaintenanceRecord",
    action: "delete",
    possession: "any",
  })
  async deleteMaintenanceRecord(
    @graphql.Args() args: DeleteMaintenanceRecordArgs
  ): Promise<MaintenanceRecord | null> {
    try {
      return await this.service.deleteMaintenanceRecord(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => ServiceCenter, {
    nullable: true,
    name: "serviceCenter",
  })
  @nestAccessControl.UseRoles({
    resource: "ServiceCenter",
    action: "read",
    possession: "any",
  })
  async getServiceCenter(
    @graphql.Parent() parent: MaintenanceRecord
  ): Promise<ServiceCenter | null> {
    const result = await this.service.getServiceCenter(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Vehicle, {
    nullable: true,
    name: "vehicle",
  })
  @nestAccessControl.UseRoles({
    resource: "Vehicle",
    action: "read",
    possession: "any",
  })
  async getVehicle(
    @graphql.Parent() parent: MaintenanceRecord
  ): Promise<Vehicle | null> {
    const result = await this.service.getVehicle(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
