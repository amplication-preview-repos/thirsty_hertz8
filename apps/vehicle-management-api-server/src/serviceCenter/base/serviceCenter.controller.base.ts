/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ServiceCenterService } from "../serviceCenter.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ServiceCenterCreateInput } from "./ServiceCenterCreateInput";
import { ServiceCenter } from "./ServiceCenter";
import { ServiceCenterFindManyArgs } from "./ServiceCenterFindManyArgs";
import { ServiceCenterWhereUniqueInput } from "./ServiceCenterWhereUniqueInput";
import { ServiceCenterUpdateInput } from "./ServiceCenterUpdateInput";
import { MaintenanceRecordFindManyArgs } from "../../maintenanceRecord/base/MaintenanceRecordFindManyArgs";
import { MaintenanceRecord } from "../../maintenanceRecord/base/MaintenanceRecord";
import { MaintenanceRecordWhereUniqueInput } from "../../maintenanceRecord/base/MaintenanceRecordWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ServiceCenterControllerBase {
  constructor(
    protected readonly service: ServiceCenterService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ServiceCenter })
  @nestAccessControl.UseRoles({
    resource: "ServiceCenter",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createServiceCenter(
    @common.Body() data: ServiceCenterCreateInput
  ): Promise<ServiceCenter> {
    return await this.service.createServiceCenter({
      data: {
        ...data,

        vehicle: data.vehicle
          ? {
              connect: data.vehicle,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,

        vehicle: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [ServiceCenter] })
  @ApiNestedQuery(ServiceCenterFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ServiceCenter",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async serviceCenters(
    @common.Req() request: Request
  ): Promise<ServiceCenter[]> {
    const args = plainToClass(ServiceCenterFindManyArgs, request.query);
    return this.service.serviceCenters({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,

        vehicle: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ServiceCenter })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ServiceCenter",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async serviceCenter(
    @common.Param() params: ServiceCenterWhereUniqueInput
  ): Promise<ServiceCenter | null> {
    const result = await this.service.serviceCenter({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,

        vehicle: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ServiceCenter })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ServiceCenter",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateServiceCenter(
    @common.Param() params: ServiceCenterWhereUniqueInput,
    @common.Body() data: ServiceCenterUpdateInput
  ): Promise<ServiceCenter | null> {
    try {
      return await this.service.updateServiceCenter({
        where: params,
        data: {
          ...data,

          vehicle: data.vehicle
            ? {
                connect: data.vehicle,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,

          vehicle: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ServiceCenter })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ServiceCenter",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteServiceCenter(
    @common.Param() params: ServiceCenterWhereUniqueInput
  ): Promise<ServiceCenter | null> {
    try {
      return await this.service.deleteServiceCenter({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,

          vehicle: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/maintenanceRecords")
  @ApiNestedQuery(MaintenanceRecordFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "MaintenanceRecord",
    action: "read",
    possession: "any",
  })
  async findMaintenanceRecords(
    @common.Req() request: Request,
    @common.Param() params: ServiceCenterWhereUniqueInput
  ): Promise<MaintenanceRecord[]> {
    const query = plainToClass(MaintenanceRecordFindManyArgs, request.query);
    const results = await this.service.findMaintenanceRecords(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        serviceCenter: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        vehicle: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/maintenanceRecords")
  @nestAccessControl.UseRoles({
    resource: "ServiceCenter",
    action: "update",
    possession: "any",
  })
  async connectMaintenanceRecords(
    @common.Param() params: ServiceCenterWhereUniqueInput,
    @common.Body() body: MaintenanceRecordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      maintenanceRecords: {
        connect: body,
      },
    };
    await this.service.updateServiceCenter({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/maintenanceRecords")
  @nestAccessControl.UseRoles({
    resource: "ServiceCenter",
    action: "update",
    possession: "any",
  })
  async updateMaintenanceRecords(
    @common.Param() params: ServiceCenterWhereUniqueInput,
    @common.Body() body: MaintenanceRecordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      maintenanceRecords: {
        set: body,
      },
    };
    await this.service.updateServiceCenter({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/maintenanceRecords")
  @nestAccessControl.UseRoles({
    resource: "ServiceCenter",
    action: "update",
    possession: "any",
  })
  async disconnectMaintenanceRecords(
    @common.Param() params: ServiceCenterWhereUniqueInput,
    @common.Body() body: MaintenanceRecordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      maintenanceRecords: {
        disconnect: body,
      },
    };
    await this.service.updateServiceCenter({
      where: params,
      data,
      select: { id: true },
    });
  }
}
