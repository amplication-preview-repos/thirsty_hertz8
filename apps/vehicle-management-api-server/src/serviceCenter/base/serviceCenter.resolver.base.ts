/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ServiceCenter } from "./ServiceCenter";
import { ServiceCenterCountArgs } from "./ServiceCenterCountArgs";
import { ServiceCenterFindManyArgs } from "./ServiceCenterFindManyArgs";
import { ServiceCenterFindUniqueArgs } from "./ServiceCenterFindUniqueArgs";
import { CreateServiceCenterArgs } from "./CreateServiceCenterArgs";
import { UpdateServiceCenterArgs } from "./UpdateServiceCenterArgs";
import { DeleteServiceCenterArgs } from "./DeleteServiceCenterArgs";
import { MaintenanceRecordFindManyArgs } from "../../maintenanceRecord/base/MaintenanceRecordFindManyArgs";
import { MaintenanceRecord } from "../../maintenanceRecord/base/MaintenanceRecord";
import { Vehicle } from "../../vehicle/base/Vehicle";
import { ServiceCenterService } from "../serviceCenter.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ServiceCenter)
export class ServiceCenterResolverBase {
  constructor(
    protected readonly service: ServiceCenterService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ServiceCenter",
    action: "read",
    possession: "any",
  })
  async _serviceCentersMeta(
    @graphql.Args() args: ServiceCenterCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ServiceCenter])
  @nestAccessControl.UseRoles({
    resource: "ServiceCenter",
    action: "read",
    possession: "any",
  })
  async serviceCenters(
    @graphql.Args() args: ServiceCenterFindManyArgs
  ): Promise<ServiceCenter[]> {
    return this.service.serviceCenters(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ServiceCenter, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ServiceCenter",
    action: "read",
    possession: "own",
  })
  async serviceCenter(
    @graphql.Args() args: ServiceCenterFindUniqueArgs
  ): Promise<ServiceCenter | null> {
    const result = await this.service.serviceCenter(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ServiceCenter)
  @nestAccessControl.UseRoles({
    resource: "ServiceCenter",
    action: "create",
    possession: "any",
  })
  async createServiceCenter(
    @graphql.Args() args: CreateServiceCenterArgs
  ): Promise<ServiceCenter> {
    return await this.service.createServiceCenter({
      ...args,
      data: {
        ...args.data,

        vehicle: args.data.vehicle
          ? {
              connect: args.data.vehicle,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ServiceCenter)
  @nestAccessControl.UseRoles({
    resource: "ServiceCenter",
    action: "update",
    possession: "any",
  })
  async updateServiceCenter(
    @graphql.Args() args: UpdateServiceCenterArgs
  ): Promise<ServiceCenter | null> {
    try {
      return await this.service.updateServiceCenter({
        ...args,
        data: {
          ...args.data,

          vehicle: args.data.vehicle
            ? {
                connect: args.data.vehicle,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ServiceCenter)
  @nestAccessControl.UseRoles({
    resource: "ServiceCenter",
    action: "delete",
    possession: "any",
  })
  async deleteServiceCenter(
    @graphql.Args() args: DeleteServiceCenterArgs
  ): Promise<ServiceCenter | null> {
    try {
      return await this.service.deleteServiceCenter(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [MaintenanceRecord], {
    name: "maintenanceRecords",
  })
  @nestAccessControl.UseRoles({
    resource: "MaintenanceRecord",
    action: "read",
    possession: "any",
  })
  async findMaintenanceRecords(
    @graphql.Parent() parent: ServiceCenter,
    @graphql.Args() args: MaintenanceRecordFindManyArgs
  ): Promise<MaintenanceRecord[]> {
    const results = await this.service.findMaintenanceRecords(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Vehicle, {
    nullable: true,
    name: "vehicle",
  })
  @nestAccessControl.UseRoles({
    resource: "Vehicle",
    action: "read",
    possession: "any",
  })
  async getVehicle(
    @graphql.Parent() parent: ServiceCenter
  ): Promise<Vehicle | null> {
    const result = await this.service.getVehicle(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
